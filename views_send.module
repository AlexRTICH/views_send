<?php
// $Id

/**
 * @file
 *   The Views Send module.
 *
 * Views Send allow sending mass mailing using Views Bulk Operations module.
 *
 * @ingroup views_send
 */


/**
 * E-mail priorities.
 */
define('VIEWS_SEND_PRIORITY_NONE', 0);
define('VIEWS_SEND_PRIORITY_HIGHEST', 1);
define('VIEWS_SEND_PRIORITY_HIGH', 2);
define('VIEWS_SEND_PRIORITY_NORMAL', 3);
define('VIEWS_SEND_PRIORITY_LOW', 4);
define('VIEWS_SEND_PRIORITY_LOWEST', 5);

/**
 * Capture PHP max_execution_time before drupal_cron_run().
 * Workaround for Drupal 6.14. See http://drupal.org/node/584334
 */
define('VIEWS_SEND_MAX_EXECUTION_TIME', ini_get('max_execution_time'));


// === Action implementation ===================================================

/**
 * Implementation of hook_action_info()
 *
 * @see http://drupal.org/node/172152
 */
function views_send_action_info() {
  return array(
    'views_send_mail_action' => array(
      'type' => 'system',
      'description' => t('Send mass mail'),
      'configurable' => TRUE,
      'permissions' => array('mass mailing with views_send'),
    ),
  );
}

/**
 * Configuration form for views_send_mail action.
 *
 * @see http://drupal.org/node/172152
 */
function views_send_mail_action_form($context) {
  $display = $context['view']->name .':'. $context['view']->current_display;
  $form = array();
  $form['from'] = array(
    '#type' => 'fieldset',
    '#title' => t('Sender'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  $form['from']['views_send_from_name'] = array(
    '#type' => 'textfield',
    '#title' => t('Sender\'s name'),
    '#description' => t('Enter the sendes\' human readable name.'),
    '#default_value' => variable_get('views_send_from_name_'. $display, variable_get('site_name', '')),
    '#maxlen' => 255,
  );
  $form['from']['views_send_from_mail'] = array(
    '#type' => 'textfield',
    '#title' => t('Sender\'s e-mail'),
    '#description' => t('Enter the sendes\' E-mail address.'),
    '#required' => TRUE,
    '#default_value' => variable_get('views_send_from_mail_'. $display, variable_get('site_mail', ini_get('sendmail_from'))),
    '#maxlen' => 255,
  );

  // Get fields.
  if (isset($context['view']->display[$context['view']->current_display]->display_options['fields'])) {
    $fields_view =& $context['view']->display[$context['view']->current_display]->display_options['fields'];
  }
  else {
    $fields_view =& $context['view']->display['default']->display_options['fields'];
  }

  // Get relationships.
  if (isset($context['view']->display[$context['view']->current_display]->display_options['relationships'])) {
    $rel_view =& $context['view']->display[$context['view']->current_display]->display_options['relationships'];
  }
  else {
    $rel_view =& $context['view']->display['default']->display_options['relationships'];
  }

  $fields = array('' => '<'. t('select') .'>');
  $tokens = array();
  foreach ($fields_view as $field_name => $field) {
    if ($field['table'] == $context['view']->base_table && $field['relationship'] == 'none' && $field_name == $context['view']->base_field) {
      $field_key = $field['field'];
    }
    else {
      $field_key = $field['table'] .'_'. ($field['relationship'] != 'none' ? $rel_view[$field['relationship']]['table'] .'_' : '') . $field['field'];
    }
    $field_text = $field['label'] .' ('. $field_key .')';
    $fields[$field_key] = $field_text;
    $tokens['[views-send-'. $field_key .']'] = $field_text;
  }

  $form['views_send_tokens'] = array(
    '#type' => 'value',
    '#value' => $tokens,
  );

  $form['to'] = array(
    '#type' => 'fieldset',
    '#title' => t('Recipients'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  $form['to']['views_send_to_name'] = array(
    '#type' => 'select',
    '#title' => t('Field used for recipient\'s name'),
    '#description' => t('Select which field from the current view will be used as recipient\'s name.'),
    '#options' => $fields,
    '#default_value' => variable_get('views_send_to_name_'. $display, ''),
  );
  $form['to']['views_send_to_mail'] = array(
    '#type' => 'select',
    '#title' => t('Field used for recipient\'s E-mail'),
    '#description' => t('Select which field from the current view will be used as recipient\'s E-mail.'),
    '#options' => $fields,
    '#default_value' => variable_get('views_send_to_mail_'. $display, ''),
    '#required' => TRUE,
  );
  $form['mail'] = array(
    '#type' => 'fieldset',
    '#title' => t('E-mail content'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  $form['mail']['views_send_subject'] = array(
    '#type' => 'textfield',
    '#title' => t('Subject'),
    '#description' => t('Enter the E-mail\'s subject line.'),
    '#maxlen' => 255,
    '#required' => TRUE,
    '#default_value' => variable_get('views_send_subject_'. $display, ''),
  );
  $form['mail']['views_send_message'] = array(
    '#type' => 'textarea',
    '#title' => t('Message'),
    '#description' => t('Enter the body of the message. You can use the following token replacements.'),
    '#required' => TRUE,
    '#rows' => 10,
    '#default_value' => variable_get('views_send_message_'. $display, ''),
  );
  $form['mail']['views_send_message_format'] = filter_form(variable_get('views_send_message_format_'. $display, FILTER_FORMAT_DEFAULT));
  $form['mail']['token'] = array(
    '#type' => 'fieldset',
    '#title' => t('Replacements'),
    '#description' => t('You can use these token replacements in Subject or Message Body.'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['mail']['token']['tokens'] = array(
    '#type' => 'markup',
    '#value' => theme('views_send_token_help', $tokens),
  );

  $form['additional'] = array(
    '#type' => 'fieldset',
    '#title' => t('Additional E-mail options'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $description = t('E-mail format.');
  if (!module_exists('mimemail')) {
        $description .= ' '. t('Install <a href="@mime_mail_url">Mime Mail</a> module to send newsletters in HTML format.', array('@mime_mail_url' => 'http://drupal.org/project/mimemail'));
  }
  $form['additional']['views_send_format'] = array(
    '#type' => 'select',
    '#title' => t('Format'),
    '#options' => _views_send_format_options(),
    '#description' => $description,
    '#default_value' => variable_get('views_send_format_'. $display, 'plain'),
  );
  $form['additional']['views_send_priority'] = array(
    '#type' => 'select',
    '#title' => t('Priority'),
    '#options' => array(
      VIEWS_SEND_PRIORITY_NONE => t('none'),
      VIEWS_SEND_PRIORITY_HIGHEST => t('highest'),
      VIEWS_SEND_PRIORITY_HIGH => t('high'),
      VIEWS_SEND_PRIORITY_NORMAL => t('normal'),
      VIEWS_SEND_PRIORITY_LOW => t('low'),
      VIEWS_SEND_PRIORITY_LOWEST => t('lowest')
    ),
    '#description' => t('Note that email priority is ignored by a lot of email programs.'),
    '#default_value' => variable_get('views_send_priority_'. $display, 0),
  );
  $form['additional']['views_send_receipt'] = array(
    '#type' => 'checkbox',
    '#title' => t('Request receipt'),
    '#default_value' => variable_get('views_send_receipt_'. $display, 0),
    '#description' => t('Request a Read Receipt from your E-mails. A lot of email programs ignore these so it is not a definitive indication of how many people have read your message.'),
  );
  $form['additional']['views_send_headers'] = array(
    '#type' => 'textarea',
    '#title' => t('Additional headers'),
    '#description' => t("Additional headers to be send with the message. You'll have to enter one per line. Example:<pre>Reply-To: noreply@example.com\nX-MyCustomHeader: Whatever</pre>"),
    '#rows' => 4,
    '#default_value' => variable_get('views_send_headers_'. $display, ''),
  );

  $form['views_send_remember'] = array(
    '#type' => 'checkbox',
    '#title' => t('Remember these values next time when you will send mass mail.'),
    '#default_value' => variable_get('views_send_remember_'. $display, TRUE),
  );
  return $form;
}

/**
 * Validation callback for views_send_mail action configuration form.
 *
 * @see http://drupal.org/node/172152
 */
function views_send_mail_action_validate($form, $form_state) {
  $values =& $form_state['values'];

  // Check if sender's E-mail is a valid one.
  if (!valid_email_address($values['views_send_from_mail'])) {
    form_set_error('from_mail', t('The sender\'s E-mail is not a valid E-mail name: %mail', array('%mail' => $values['views_send_from_mail'])));
  }

  // Check in the column selected as E-mail contain valid E-mail values.
  if (!empty($values['views_send_to_mail'])) {
    $wrong_addresses = 0;

    /**
     * "views_send_mail_action" was the only action configured and "Merge single
     * action's form with node selection view" checkbox is checked. We are on
     * first submit and the $form_state['storage'] is not populated yet.
     */
    if ($values['step'] == VIEWS_BULK_OPS_STEP_SINGLE) {
      // Normalize selection.
      _views_bulk_operations_adjust_selection($values['objects']['selection'], $values['objects']['select_all'], $values['exposed_input'], $values['arguments'], $values['plugin']);
      $records =& $values['objects']['selection'];
    }
    /**
     * Common usage: "views_send_mail_action" isn't the only action configured
     * or "Merge single action's form with node selection view" checkbox is
     * checked. $form_state['storage'] is populated and we will use it.
     */
    else {
      $records =& $form_state['storage'][1]['objects']['selection'];
    }

    foreach ($records as $record) {
      $email = $record->{$values["views_send_to_mail"]};
      if (!valid_email_address($email)) {
        $wrong_addresses++;
      }
    }

    if ($wrong_addresses) {
      form_set_error('to_mail', t('The field used for recipient\'s E-mail %field contains @wrong invalid E-mail addresses from a total of @total selected. Choose other field to act as recipient\'s E-mail or narrow the selection to a subset containing only valid addresses.', array('%field' => $values['views_send_to_mail'], '@wrong' => $wrong_addresses, '@total' => count($records))));
    }
  }
}

/**
 * Action configuration submission callback.
 *
 * @see http://drupal.org/node/172152
 */
function views_send_mail_action_submit($form, &$form_state) {
  $display = $form_state['storage'][1]['plugin']->view->name .':'. $form_state['storage'][1]['plugin']->view->current_display;
  $values =& $form_state['values'];
  $return = array(
    // TODO: Do we need this?
    'view' => &$form_state['storage'][1]['plugin']->view,
    /**
     * TODO: This is just a flag needed in hook_form_alter() to identify the
     * form. Find other clever way to do that...
     */
    'views_send' => TRUE,
    'views_send_tokens' => $values['views_send_tokens'],
  );
  foreach ($values as $key => $value) {
    if (substr($key, 0, 11) == 'views_send_') {
      if ($values['views_send_remember']) {
        variable_set($key .'_'. $display, $value);
      }
      $return += array($key => $value);
    }
  }
  $form_state['views_send'] = TRUE;
  return $return;
}

/**
 * Main action callback.
 *
 * @see http://drupal.org/node/172152
 */
function views_send_mail_action($object, $context) {
  global $user;
  $time = time();

  $to_name = $context['views_send_to_name'] ? $context['row']->{$context["views_send_to_name"]} : '';
  $to_mail = $context['views_send_to_mail'];

  $subject = $context['views_send_subject'];
  $message = check_markup($context['views_send_message'], $context['views_send_message_format']);

  // Populate row/context tokens.
  $token_keys = array_keys($context['views_send_tokens']);
  $token_values = array();
  foreach ($token_keys as $token) {
    $field = substr(substr($token, 12), 0, -1);
    $token_values[] = $context['row']->{$field};
  }
  $subject = str_replace($token_keys, $token_values, $subject);
  $message = str_replace($token_keys, $token_values, $message);

  // Let Token module operate substitutions.
  if (module_exists('token')) {
    _views_send_normalize_context($context);
    $subject = token_replace_multiple($subject, $context);
    $message = token_replace_multiple($message, $context);
  }

  // Queue the message to the spool table.
  db_query("INSERT INTO {views_send_spool} (uid, timestamp, from_name, from_mail, to_name, to_mail, subject, message, format, priority, receipt, headers) VALUES (%d, %d, '%s', '%s', '%s', '%s', '%s', '%s', '%s', %d, %d, '%s')", $user->uid, $time, $context['views_send_from_name'], $context['views_send_from_mail'], $to_name, $to_mail, $subject, $message, $context['views_send_format'], $context['views_send_priority'], $context['views_send_receipt'], $context['views_send_headers']);
}

// === Hook implementations ====================================================

/**
 * Implementation of hook_menu().
 *
 * @see http://api.drupal.org/api/function/hook_menu/6
 */
function views_send_menu() {
  $items = array();
  $items['admin/settings/views_send'] = array(
    'type' => MENU_NORMAL_ITEM,
    'title' => 'Views Send',
    'description' => 'Configure Views Send general options.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('views_send_settings'),
    'access arguments' => array('administer views_send'),
  );
  return $items;
}

/**
 * Implementation of hook_perm().
 *
 * @see http://api.drupal.org/api/function/hook_perm/6
 */
function views_send_perm() {
  return array(
    'administer views_send',
    'mass mailing with views_send'
  );
}

/**
 * Implementation of hook_theme().
 *
 * @see http://api.drupal.org/api/function/hook_theme/6
 */
function views_send_theme($existing, $type, $theme, $path) {
  return array(
    'views_send_token_help' => array(
      'arguments' => array('tokens' => array()),
    ),
  );
}

/**
 * Implementation of hook_form_alter()
 * We wand to alter the confirmation form, just before processing the action, so the the user can preview the whole message berore sending it.
 *
 * @see http://api.drupal.org/api/function/hook_form_alter/6
 */
function views_send_form_alter($form, $form_state, $form_id) {

  // TODO: Is there a better way to pickup the right form?
  if ($form_id == 'views_bulk_operations_form__1' && isset($form_state['storage']['operation_arguments']['views_send'])) {

    drupal_set_title(t('Review and confirm the message that is about to be send'));
    drupal_add_css(drupal_get_path('module', 'views_send') .'/views_send.css');

    $args =& $form_state['storage']['operation_arguments'];

    // Drop the confirmation form warning message.
    unset($form['description']);


    $form['#attributes']['class'] .= ' views-send-preview';
    $form['from'] = array(
      '#type' => 'item',
      '#title' => t('From'),
      '#value' => '<div class="views-send-preview-value">'. (empty($args['views_send_from_name']) ? $args['views_send_from_mail'] : $args['views_send_from_name'] . check_plain(' <'. $args['views_send_from_mail'] .'>')) .'</div>',
    );

    $recipients = array();
    foreach ($form_state['storage'][1]['objects']['selection'] as $oid => $row) {
      $email = $row->{$form_state["storage"]["operation_arguments"]["views_send_to_mail"]};
      $name = $row->{$form_state["storage"]["operation_arguments"]["views_send_to_name"]};
      $recipients[] = check_plain(empty($name) ? $email : $name .' <'. $email .'>');
    }

    $form['to'] = array(
      '#type' => 'item',
      '#title' => t('To'),
      '#value' => '<div id="views-send-preview-to" class="views-send-preview-value">'. implode(', ', $recipients) .'</div>',
    );
    $form['subject'] = array(
      '#type' => 'item',
      '#title' => t('Subject'),
      '#value' => '<div class="views-send-preview-value">'. $args['views_send_subject'] .'</div>',
    );
    $form['message'] = array(
      '#type' => 'item',
      '#title' => t('Message'),
      '#value' => '<div id="views-send-preview-message" class="views-send-preview-value">'. $args['views_send_message'] .'</div>',
    );

    $headers = array();
    foreach (_views_send_headers($args['views_send_receipt'], $args['views_send_priority'], $args['views_send_from_mail'], $args['views_send_headers']) as $key => $value) {
      $headers[] = $key .': '. $value;
    }

    $form['headers'] = array(
      '#type' => 'item',
      '#title' => t('Headers'),
      '#value' => '<div id="views-send-preview-headers" class="views-send-preview-value">'. implode('<br />', $headers) .'</div>',
    );

    $form['actions']['#weight'] = 100;
  }
}

/**
 * Implementation of hook_cron().
 *
 * @see http://api.drupal.org/api/function/hook_cron/6
 */
function views_send_cron() {
  views_send_send_from_spool();
  views_send_clear_spool();
}

/**
 * Implementation of hook_mail().
 *
 * @see http://api.drupal.org/api/function/hook_mail/6
 */
function views_send_mail($key, &$message, $params) {

  // This is a simple message send. User inputs the content directly.
  if ($key == 'direct') {
    // Set the subject.
    $message['subject'] =& $params['message']->subject;

    // Set the body.
    $message['body'] =& $params['message']->message;

    // Add additional headers.
    $message['headers'] += _views_send_headers($params['message']->receipt, $params['message']->priority, $params['from']['address'], $params['message']->headers);
  }

  // TODO: Implement node message parsing.
  elseif ($key == 'node') {
    // Translations, theming, etc...
  }
}

// === Callbacks ===============================================================

/**
 * Callback for admin/settings/views_send meni item.
 */
function views_send_settings() {
  $form = array();

  $throttle = drupal_map_assoc(array(1, 10, 20, 30, 50, 100, 200, 500, 1000, 2000, 5000, 10000, 20000));
  $throttle[0] = t('Unlimited');

  $form['views_send_throttle'] = array(
    '#type' => 'select',
    '#title' => t('Cron throttle'),
    '#options' => $throttle,
    '#default_value' => variable_get('views_send_throttle', 20),
    '#description' => t('Sets the numbers of messages sent per cron run. Failure to send will also be counted. Cron execution must not exceed the PHP maximum execution time of %max seconds. You find the time spend to send emails in the !recent_logs.', array('%max' => ini_get('max_execution_time'), '!recent_logs' => l(t('Recent log entries'), 'admin/reports/dblog'))),
  );
  $form['views_send_spool_expire'] = array(
    '#type' => 'select',
    '#title' => t('Mail spool expiration'),
    '#options' => array(0 => t('Immediate'), 1 => t('1 day'), 7 => t('1 week'), 14 => t('2 weeks')),
    '#default_value' => variable_get('views_send_spool_expire', 0),
    '#description' => t('E-mails are spooled. How long must messages be retained in the spool after successfull sending.'),
  );
  $form['views_send_debug'] = array(
    '#type' => 'checkbox',
    '#title' => t('Log emails'),
    '#default_value' => variable_get('views_send_debug', FALSE),
    '#description' => t('When checked all outgoing mesages are logged in the system log. A logged E-mail does not guarantee that it is send or will be delivered. It only indicates that a message is send to the PHP mail() function. No status information is available of delivery by the PHP mail() function.'),
  );

  return system_settings_form($form);
}

// === API functions ===========================================================

/**
 * Process the spool queue at cron run.
 */
function views_send_send_from_spool() {
  $limit = variable_get('views_send_throttle', 20);
  $ok = $fail = $check = 0;

  // Get PHP maximum execution time. 30 seconds default.
  $max_execution_time = ini_get('max_execution_time') ? ini_get('max_execution_time') : VIEWS_SEND_MAX_EXECUTION_TIME;

  // Reset a Drupal timer.
  timer_start('views_send');

  // Retrieve messages to be send.
  $query = "SELECT * FROM {views_send_spool} WHERE status = %d ORDER BY tentatives ASC, timestamp ASC";
  $result = $limit ? db_query_range($query, 0, 0, $limit) : db_query($query, 0);
  while ($message = db_fetch_object($result)) {
    // Send the message.
    $status = views_send_deliver($message);

    if ($status) {
      // Update the spool status.
      db_query("UPDATE {views_send_spool} SET status = %d WHERE eid = %d", 1, $message->eid);
      $ok++;
    }
    else {
      // Increment tentatives so that next time this message
      // will be scheduled with low priority
      db_query("UPDATE {views_send_spool} SET tentatives = tentatives + 1 WHERE eid = %d", $message->eid);
      $fail++;
    }

    // Check the elapsed time and break if we've spent more than 80%.
    // We check every 50 messages.
    if (++$check >= 50) {
      // Reset the counter.
      $check = 0;

      // Break if exceded.
      if (timer_read('views_send') > .8 * $max_execution_time) {
        watchdog('views_send', 'PHP maximum execution time almost exceeded. Remaining E-mail messages will be sent during the next cron run. If this warning occurs regularly you should reduce the cron throttle setting.', NULL, WATCHDOG_WARNING);
        break;
      }
    }
  }

  if ($ok + $fail > 0) {
    // Log results and exit.
    watchdog('views_send', '%ok messages sent in %sec seconds, %fail failed sending.', array('%ok' => $ok, '%sec' => timer_read('views_send'), '%fail' => $fail));
  }
}

function views_send_deliver($message) {
  /**
   * TODO: In the future, this module will be able to send an existing node.
   * $key will have to make the difference. A value when we pickup a node, other
   * when user inputs the subject & body of the message.
   */
  $key = 'direct';

  // Build message parameters.
  $params = array();

  // Sender's address.
  $params['from'] = _views_send_format_address($message->from_mail, $message->from_name);

  // Recipient's address.
  $params['to'] = _views_send_format_address($message->to_mail, $message->to_name);

  // Add the message to $params.
  $params['message'] =& $message;

  // Send mail.
  if (module_exists('mimemail')) {
    $mail = drupal_mail('views_send', $key, $params['to']['formatted'], NULL, $params, $params['from']['formatted'], FALSE);

    $plain = ($message->format == 'plain');

    $mail['result'] = mimemail(
      $mail['from'],
      $mail['to'],
      $mail['subject'],
      $mail['body'],
      $plain,
      $mail['headers'],
      $plain ? $mail['body'] : _views_send_html_to_text($mail['body'], TRUE),
      // TODO: Add attachments capability....
      array(),
      ''
    );
  }
  else {
    $mail = drupal_mail('views_send', $key, $params['to']['formatted'], NULL, $params, $params['from']['formatted'], TRUE);
  }
  return $mail['result'];
}

/**
 * Clear the expired items from spool.
 */
function views_send_clear_spool() {
  // TODO: Drupal 7: replace time() with REQUEST_TIME.
  $expiration_time = time() - variable_get('views_send_spool_expire', 0) * 86400;
  db_query("DELETE FROM {views_send_spool} WHERE status = %d AND timestamp <= %d", 1, $expiration_time);
}

// === Helper functions ========================================================

/**
 * Determine possible mail format options.
 *
 * The mime_mail module must be installed to send HTML mails.
 */
function _views_send_format_options() {
  $options = array('plain' => t('plain'));
  if (module_exists('mimemail') || module_exists('htmlmail')) {
    $options['html'] = t('html');
  }
  return $options;
}

/**
 * Build header array with priority and receipt confirmation settings.
 *
 * @param $receipt
 *   Boolean: If a receipt is requested.
 * @param $priority
 *   Integer: The message priority.
 * @param $from
 *   String: The sender's E-mail address.
 *
 * @return Header array with priority and receipt confirmation info
 */
function _views_send_headers($receipt, $priority, $from, $additional_headers) {
  $headers = array();

  // If receipt is requested, add headers.
  if ($receipt) {
    $headers['Disposition-Notification-To'] = $from;
    $headers['X-Confirm-Reading-To'] = $from;
  }

  // Add priority if set.
  switch ($priority) {
    case VIEWS_SEND_PRIORITY_HIGHEST:
      $headers['Priority'] = 'High';
      $headers['X-Priority'] = '1';
      $headers['X-MSMail-Priority'] = 'Highest';
      break;
    case VIEWS_SEND_PRIORITY_HIGH:
      $headers['Priority'] = 'urgent';
      $headers['X-Priority'] = '2';
      $headers['X-MSMail-Priority'] = 'High';
      break;
    case VIEWS_SEND_PRIORITY_NORMAL:
      $headers['Priority'] = 'normal';
      $headers['X-Priority'] = '3';
      $headers['X-MSMail-Priority'] = 'Normal';
      break;
    case VIEWS_SEND_PRIORITY_LOW:
      $headers['Priority'] = 'non-urgent';
      $headers['X-Priority'] = '4';
      $headers['X-MSMail-Priority'] = 'Low';
      break;
    case VIEWS_SEND_PRIORITY_LOWEST:
      $headers['Priority'] = 'non-urgent';
      $headers['X-Priority'] = '5';
      $headers['X-MSMail-Priority'] = 'Lowest';
      break;
  }

  // Add general headers.
  $headers['Precedence'] = 'bulk';

  // Add additional headers.
  $additional_headers = trim($additional_headers);
  $additional_headers = str_replace("\r", "\n", $additional_headers);
  $additional_headers = explode("\n", $additional_headers);
  foreach ($additional_headers as $header) {
    $header = trim($header);
    if (!empty($header)) {
      list($key, $value) = explode(': ', $header, 2);
      $headers[$key] = trim($value);
    }
  }

  return $headers;
}

/**
 * Build a formatted E-mail address.
 */
function _views_send_format_address($mail, $name) {
  $name = trim($name);

  // Do not format addres on Windows based PHP systems or when $name is empty.
  $formatted_address = ((substr(PHP_OS, 0, 3) == 'WIN') || empty($name)) ? $mail : '"'. mime_header_encode($name) .'" <'. $mail .'>';

  return array(
    'address' => $mail,
    'formatted' => $formatted_address,
  );
}

/**
 * HTML to text conversion for HTML and special characters.
 * Converts some special HTMLcharacters in addition to drupal_html_to_text().
 * Inspired from Simplenews,
 *
 * @param $text
 *   String: Source text with HTML and special characters.
 *
 * @return
 *   String: Target text with HTML and special characters replaced.
 */
function _views_send_html_to_text($text) {
  $pattern = '@<a[^>]+?href="([^"]*)"[^>]*?>(.+?)</a>@is';
  $text = preg_replace_callback($pattern, '_views_send_absolute_mail_urls', $text);

  // Replace some special characters before performing the drupal standard conversion.
  $preg = _views_send_html_replace();
  $text = preg_replace(array_keys($preg), array_values($preg), $text);

  // Perform standard drupal html to text conversion.
  return drupal_html_to_text($text);
}

/**
 * Helper function for _views_send_html_to_text().
 * Inspired from Simplenews.
 *
 * List of preg* regular expression patterns to search for and replace with
 */
function _views_send_html_replace() {
    return array(
        '/&quot;/i'  => '"',
        '/&gt;/i'    => '>',
        '/&lt;/i'    => '<',
        '/&amp;/i'   => '&',
        '/&copy;/i'  => '(c)',
        '/&trade;/i' => '(tm)',
        '/&#8220;/'  => '"',
        '/&#8221;/'  => '"',
        '/&#8211;/'  => '-',
        '/&#8217;/'  => "'",
        '/&#38;/'    => '&',
        '/&#169;/'   => '(c)',
        '/&#8482;/'  => '(tm)',
        '/&#151;/'   => '--',
        '/&#147;/'   => '"',
        '/&#148;/'   => '"',
        '/&#149;/'   => '*',
        '/&reg;/i'   => '(R)',
        '/&bull;/i'  => '*',
        '/&euro;/i'  => 'Euro ',
    );
}

/**
 * Helper function for _views_send_html_to_text().
 * Replaces URLs with abolute URLs.
 *
 * Inspired from Simplenews.
 */
function _views_send_absolute_mail_urls($match) {
  global $base_url, $base_path;
  static $regexp;
  $url = $label = '';

  if ($match) {
    if (empty($regexp)) {
      $regexp = '@^'. preg_quote($base_path, '@') .'@';
    }
    list(, $url, $label) = $match;
    $url = strpos($url, '://') ? $url : preg_replace($regexp, $base_url .'/', $url);

    // If the link is formed by Drupal's URL filter, we only return the URL.
    // The URL filter generates a label out of the original URL.
    if (strpos($label, '...') === strlen($label) - 3) {
      // Remove ellipsis from end of label.
      $label = substr($label, 0, strlen($label) - 3);
    }
    if (strpos($url, $label) !== FALSE) {
      return $url;
    }
    return $label .' '. $url;
  }
}

/**
 * Normalizing the context. If token_action.module is not enabled we'll have to
 * normalize here. Otherwise use token_normalize_context().
 *
 * @see http://drupalcontrib.org/api/function/token_normalize_context/6
 */
function _views_send_normalize_context(&$context) {
  if (function_exists('token_normalize_context')) {
    token_normalize_context($context);
  }
  else {
    $context['global'] = NULL;
    if (empty($context['user']) && !empty($context['node'])) {
      $context['user'] = user_load(array('uid' => $context['node']->uid));
    }
    if (empty($context['node']) && !empty($context['comment']) && !empty($context['comment']->nid)) {
      $context['node'] = node_load($context['comment']->nid);
    }
  }
}

// === Theming functions =======================================================

/**
 * Theme the replacement tokens.
 *
 * @param $tokens:
 *   Keyed array with tokens as keys and description as values.
 *
 * @return
 *   A themed table wirh all tokens.
 */
function theme_views_send_token_help($tokens) {
  $headers = array(t('Token'), t('Replacement value'));
  $rows = array();

  $rows[] = array(array('data' => t('View row tokens'), 'class' => 'region', 'colspan' => 2));
  foreach ($tokens as $token => $title) {
    $rows[] = array($token, $title);
  }

  if (module_exists('token')) {
    token_include();
    $full_list = token_get_list();

    foreach ($full_list as $key => $category) {
      $rows[] = array(array('data' => drupal_ucfirst($key) .' '. t('tokens'), 'class' => 'region', 'colspan' => 2));
      foreach ($category as $token => $description) {
        $row = array();
        $row[] = $prefix . $token . $suffix;
        $row[] = $description;
        $rows[] = $row;
      }
    }
  }

  $output = theme('table', $headers, $rows, array('class' => 'description'));
  return $output;
}
